//C++:
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
// 		   Solution1:
//         priority_queue<vector<int>> pq;
//         int n = intervals.size();
//         sort(intervals.begin(),intervals.end());
        
//         for (int i=0;i<n;++i)
//         {
//             pq.push(intervals[i]);
//             if (pq.size()>=2)
//             {
//                 auto top1 = pq.top();
//                 pq.pop();
//                 auto top2 = pq.top();
//                 pq.pop();
//                 if (top1[0]<=top2[1])   pq.push({top2[0],max(top1[1],top2[1])});
//                 else
//                 {
//                     pq.push(top1);
//                     pq.push(top2);
//                 }
//             }
//         }
        
//         vector<vector<int>> res;
//         while (!pq.empty())
//         {
//             res.push_back(pq.top());
//             pq.pop();
//         }
//         return res;

//		Solution 2:
        sort(intervals.begin(),intervals.end());
        vector<vector<int>> res;
        res.push_back(intervals[0]);
        int n = intervals.size();
        
        for (int i=1;i<n;++i)
        {
            if (res.back()[1] >= intervals[i][0])   res.back()[1] = max(res.back()[1],intervals[i][1]);
            else    res.push_back(intervals[i]);
        }
        
        return res;
    }
};
//Python:
class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """
        res = []
        n = len(intervals)
        intervals.sort()
        
        res.append(intervals[0])
        
        for i in range(1,n):
            if res[-1][1]>=intervals[i][0]: res[-1][1] = max(res[-1][1],intervals[i][1])
            else:   res.append(intervals[i])
        return res
