//C++:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        queue<TreeNode*> q;
        
        if (root)   q.push(root);
        while (!q.empty())
        {
            int n = q.size();
            vector<int> level;
            for (int i=0;i<n;++i)
            {
                TreeNode *node = q.front();
                q.pop();
                level.push_back(node->val);
                if (node->left)    q.push(node->left);
                if (node->right)    q.push(node->right);                    
 
                
            }
            res.push_back(level);
        }
        return res;
    }
};

// Python:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def levelOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        q = deque()
        res = []
        if root:    q.append(root)
        while q:
            n = len(q)
            level = []
            for i in range(n):
                node = q[0]
                q.popleft()
                level.append(node.val)
                if node.left:   q.append(node.left)
                if node.right: q.append(node.right)

            res.append(level)
        
        return res
            


