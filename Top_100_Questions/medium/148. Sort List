//C++:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(!head || !head->next)    return head;
        
        // get length 
        ListNode* curr = head;
        int length = 0;
        while (curr)
        {
            length++;
            curr = curr->next;
        }
        
        ListNode dummy(0);
        dummy.next = head;
        ListNode *left, *right, *tail;
        
        for (int i=1;i<length;i<<=1)
        {
            curr = dummy.next;
            tail = &dummy;
            
            while (curr)
            {
                left = curr;
                right = split(left,i);
                curr = split(right,i);
                tail = merge(left,right,tail);
            }
        }
        
        return dummy.next;
        
    }
    
private:
    ListNode* split(ListNode* head,int n)
    {
        for (int i=1;head && i<n;++i)   head = head->next;
        
        if (!head) return nullptr;
        
        ListNode* second = head->next;
        head->next = nullptr;
        
        return second;
    }
    
    ListNode* merge(ListNode* l1, ListNode* l2, ListNode* head)
    {
        ListNode* curr = head;
        
        while (l1 && l2)
        {
            if(l1->val > l2->val)
            {
                curr->next = l2;
                curr = l2;
                l2 = l2->next;
            }
            else
            {
                curr->next = l1;
                curr = l1;
                l1 = l1->next;
            }
        }
        
        curr->next = l1? l1:l2;
        while (curr->next)  curr = curr->next;
        
        return curr;
        
        
    }
    
};
// TC: O(n)
// SC: O(n)
