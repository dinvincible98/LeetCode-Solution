//C++:
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        
        queue<pair<int,int>> q;
        int fresh = 0;
        
        for (int i=0;i<m;++i)
        {
            for (int j=0;j<n;++j)
            {
                if (grid[i][j] == 2)    q.push({i,j});
                if (grid[i][j] == 1)    fresh++;
            }
        }
        
        int res = -1;
        while (!q.empty())
        {
            int sz = q.size();
            while (sz--)
            {
                auto p = q.front();
                q.pop();
                
                for (auto& d:dirs)
                {
                    int r = p.first+d[0];
                    int c = p.second+d[1];
                    if (r>=0 && c>=0 && r<m && c<n && grid[r][c]==1)
                    {
                        grid[r][c] = 2;
                        q.push({r,c});
                        fresh--;
                    }
                }
            }
            res++;
        }
        
        if (fresh > 0)  return -1;      // there is left fresh orange impossible
        if (res == -1)  return 0;       // no fresh orange
        
        return res;
        
    }
private:
    vector<vector<int>> dirs{{1,0},{-1,0},{0,1},{0,-1}};
};
// TC: O(n)
// SC: O(n)
