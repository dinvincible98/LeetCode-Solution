//C++:
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        int Min = INT_MAX;
        int res;
        
        for (int i=0;i<n-2;++i)
        {
            int left = i+1;
            int right = n-1;

            while(left<right)
            {
                int sum = nums[i]+nums[left]+nums[right];             
                if(abs(sum-target)<Min)
                {
                    Min = abs(sum-target);
                    res = sum;
                }
                
                if(sum<target)  ++left;
                else if (sum>target)    --right;
                else    return sum;
            }
        }
        return res;
    }
};

//Python:
class Solution(object):
    def threeSumClosest(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        n = len(nums)
        nums.sort()
        Min = 1e4+1
        res = 0
        
        for i in range(n-2):
            left = i+1
            right = n-1            
            while left<right:
                Sum = nums[i]+nums[left]+nums[right]
                if abs(Sum-target)<Min:
                    Min = abs(Sum-target)
                    res = Sum
                
                if Sum>target:  right-=1
                elif Sum<target: left+=1
                else:   return Sum
        return res
