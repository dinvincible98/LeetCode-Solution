# 167.Two Sum II - Input array is sorted

C++ :
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
	int i = 0 , j = numbers.size() -1;
	while (i < j){
		int sum = numbers[i] + numbers[j];
		if (sum == target){
			return {i+1, j+1};
	    }
		else if (sum < target){
			i++;
		}
		else{
			j--;
		}
    }
	return {};
  }
};


Python: 
Sol #1(dictionary):
class Solution(object):
    def twoSum(self, numbers, target):
        """
        :type numbers: List[int]
        :type target: int
        :rtype: List[int]
        """
        temp = {}
        for i, num in enumerate(numbers):
			temp[num] = i
        for i, num in enumerate(numbers):
			remainder = target - num
			if remainder in temp and temp[remainder] > i:
				return [i+1, temp[remainder]+1]
Sol #2:
class Solution(object):
    def twoSum(self, numbers, target):
        """
        :type numbers: List[int]
        :type target: int
        :rtype: List[int]
        """
        i, j = 0, len(numbers) - 1
        
        while i < j:
            Sum = numbers[i] + numbers[j]
            if Sum > target:
                j -= 1
            elif Sum < target:
                i += 1
            else:
                return [i + 1, j + 1] 
C:
int* twoSum(int* numbers, int numbersSize, int target, int* returnSize){
    int * ans = (int*)malloc(sizeof(int)*2);
    *returnSize = 2;
    int i = 0, j = numbersSize-1;
    while(i < j)
    {
        if(numbers[i] + numbers[j] == target)
        {
            ans[0] = i+1;
            ans[1] = j+1;
            return ans;
        }
        else if(numbers[i] + numbers[j] > target)
        {
            j--;
        }
        else
        {
            i++;
        }
    }
    return NULL;
}


# 633. Sum of Square Numbers

C++:
class Solution {
public:
    bool judgeSquareSum(int c) {
        long int i = 0, j = sqrt(c);
        while(i <= j){
            long sum = i*i + j*j; 
            if (sum == c){
                return true;
            }
            else if (sum < c){
                i++;    
            }
            else{
                j--;
            }
        }
    return false;
    }
};

Python:
class Solution(object):
    def judgeSquareSum(self, c):
        """
        :type c: int
        :rtype: bool
        """
        i = 0
        j = int(c**0.5)
        while (i <= j):
            sum = i**2 + j**2
            if sum == c:
                return True
            elif sum < c:
                i += 1
            else:
                j -= 1
        return False

C:
bool judgeSquareSum(int c){
    if(c==1 || c==0) return 1;
    (long) c;
    long i = 0;
    long j = (int)sqrt(c);
    while(i <= j){
        long sum = i*i + j*j;
        if (sum == c){
            return 1;
        }
        else if (sum < c){
            i++;
        }
        else{
            j--;
        }
    }
    return 0;
}

# 345. Reverse Vowels of a String

C++:

class Solution {
public:
    string reverseVowels(string s) {
        
        int left = 0, right = s.size()-1;
        while(left < right){
            if (isVowel(s[left]) == true && isVowel(s[right]) == true){
                swap(s[left],s[right]);
                left++;
                right--;
            }
            else if (isVowel(s[left]) == false){
                left++;
            }
            else{
                right--;
            }
        }
        return s;
    } 
      
    bool isVowel(char s){
        s = tolower(s);
        if (s=='a'||s=='e'||s=='i'||s=='o'||s=='u'){
            return true;
        }
        return false;
    }
};



Python:

class Solution(object):
    def reverseVowels(self, s):
        """
        :type s: str
        :rtype: str
        """
        vowels = ['a','e','i','o','u','A','E','I','O','U']
        s = [char for char in s]
        left = 0
        right = len(s) - 1
        while (left < right):
            if s[left] not in vowels:
                left += 1
            elif s[right] not in vowels:
                right -= 1
            else:
                s[left],s[right] = s[right],s[left]
                left += 1
                right -= 1
        
        return "".join(s)

C:
bool isVowel(char c){
        if ((c=='A'|| c=='a')||
            (c=='E'|| c=='e')||
            (c=='I'|| c=='i')||
            (c=='O'|| c=='o')||
            (c=='U'|| c=='u'))    
            return true; 
        return false;
    }

char * reverseVowels(char * s){
	if (s == NULL)
		return NULL;

	int left = 0;
	int right = strlen(s) - 1;

	while (left < right)
	{
		if (!isVowel(s[left]))
			left++;
		if (!isVowel(s[right]))
			right--;

		if (isVowel(s[left]) && isVowel(s[right]))
		{
			char temp = s[left];
			s[left] = s[right];
			s[right] = temp;

			left++;
			right--;
		}
	}









































