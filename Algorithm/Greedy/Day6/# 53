53. Maximum Subarray

C++:

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int max_sum = nums[0];
        int curr_sum = nums[0];
        if (nums.size() == 0)  return 0;
        for (int i=1;i<nums.size();++i){
            curr_sum = max(curr_sum + nums[i], nums[i]);
            max_sum = max(curr_sum, max_sum);
        }
        return max_sum;
    }
};

Python:

class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0
        Max_sum= nums[0]
        Curr_sum = nums[0]
        for i in range(1,len(nums)):
            Curr_sum = max(Curr_sum + nums[i], nums[i])
            Max_sum = max(Curr_sum, Max_sum)
        return Max_sum
            
