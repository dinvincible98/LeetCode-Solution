406. Queue Reconstruction by Height

C++:

class Solution {
public:
    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {
        auto comp = [&](vector<int>& a, vector<int>& b){
            if (a[0]==b[0]){
                return a[1] < b[1];
            }
             return a[0] > b[0];
         };
        sort(people.begin(),people.end(),comp);
        
        vector<vector<int>> ans;
        for (int i=0;i<people.size();++i){
            ans.insert(ans.begin()+people[i][1], people[i]);
        }
        return ans;
        
    }
};



Python:

class Solution(object):
    def reconstructQueue(self, people):
        """
        :type people: List[List[int]]
        :rtype: List[List[int]]
        """
        sorted_height = sorted(people,key=lambda x:(x[0],-x[1]), reverse=True);  #Sort h in decending order, k in ascending order. 
        output = []
        for pair in sorted_height:
            final_index = pair[1]
            output.insert(final_index,pair)
        
        return output  
