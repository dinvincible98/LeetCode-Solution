200. Number of Islands

C++:

class Solution {
public:
    void check(vector<vector<char>>& grid, int row, int col){
        if (row<0 || row>=grid.size() || col<0 || col>= grid[0].size() || grid[row][col]=='0')  return;
        grid[row][col] = '0';
        check(grid, row-1, col);
        check(grid, row+1, col);
        check(grid, row, col-1);
        check(grid, row, col+1); 
    };
    int numIslands(vector<vector<char>>& grid) {
        if (grid.size()==0) return 0;
        if (grid[0].size()==0)  return 0;
        int res = 0;
        for (int i=0;i<grid.size();++i){
            for (int j=0;j<grid[0].size();++j){
                if (grid[i][j] == '1'){
                    check(grid,i,j);
                    res++;
                }
            }
        }
        return res;
    }
};


Python:

class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        def dfs(row,col):
            if row < 0 or row>=len(grid) or col<0 or col>=len(grid[0]) or grid[row][col]=='0':  return 0
            grid[row][col] = '0'
            dire = zip((row+1,row-1,row,row),(col,col,col+1,col-1))
            for i, j in dire:
                dfs(i,j)
            return 1
        return sum(dfs(i,j) for i in range(len(grid)) for j in range(len(grid[0])))
