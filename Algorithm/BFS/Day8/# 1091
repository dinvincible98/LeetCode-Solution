1091. Shortest Path in Binary Matrix

C++:

class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        if (grid[0][0] || grid[n-1][n-1])   return -1;
        if (n==1) return 1;
        vector<vector<int>> dir{{1,0},{-1,0},{0,1},{0,-1},{1,1},{1,-1},{-1,-1},{-1,1}};
        vector<vector<int>> dp(n, vector<int>(n,0));
        queue<pair<int,int>> pq;
        pq.push({0,0});
        dp[0][0]=1;
        
        while(!pq.empty()){
            int x = pq.front().first;
            int y = pq.front().second;
            pq.pop();
            
            for (auto i:dir){
                int a = x+i[0];
                int b = y+i[1];
                if (a<0 || b<0 || a>=n || b>=n || dp[a][b] || grid[a][b])   continue;
                dp[a][b] = dp[x][y]+1;
                pq.push({a,b});
                if (a == n-1 && b == n-1) return dp[a][b]; 
            }
        }
        return -1;    
    }
};

Python:

class Solution(object):
    def shortestPathBinaryMatrix(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        n = len(grid)
        m = len(grid[0])
        if grid[0][0]==1 or grid[n-1][m-1]==1:
            return -1
        dest = (n-1,m-1)
        frontier = [(0,0)]
        grid[0][0] = 1
        step = 0
        while frontier:
            step+=1
            next_l = []
            for cur in frontier:
                if cur == dest:
                    return step
                dire = [(cur[0]+1,cur[1]),(cur[0]-1,cur[1]),(cur[0],cur[1]+1),(cur[0],cur[1]-1),
                        (cur[0]+1,cur[1]+1),(cur[0]+1,cur[1]-1),(cur[0]-1,cur[1]-1),(cur[0]-1,cur[1]+1)]
                for y,x in dire:
                    if 0<=y<n and 0<=x<m and grid[y][x] == 0:
                        grid[y][x]=1
                        next_l.append((y,x))
                frontier = next_l
        return -1
