257. Binary Tree Paths

C++:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void backtrack(TreeNode* root, string cur_path, vector<string>& paths){
        if (!root)  return;
        cur_path += (cur_path.empty()? "":"->") + to_string(root->val);
        if (!root->left and !root->right){
            paths.push_back(cur_path);
        }
        else{
            backtrack(root->left,cur_path,paths);
            backtrack(root->right,cur_path,paths);
        }
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        string cur_path;
        vector<string> paths;
        backtrack(root, cur_path, paths);
        return paths;
    }
};


Python:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def binaryTreePaths(self, root):
        """
        :type root: TreeNode
        :rtype: List[str]
        """
        def helper(root,cur_path,paths):
            if root == None:
                return
            cur_path.append(str(root.val))
            if root.left == None and root.right == None:
                paths.append("->".join(cur_path))
            else:
                if root.left:
                    helper(root.left,cur_path,paths)
                if root.right:
                    helper(root.right,cur_path,paths)
            cur_path.pop()
        paths = []
        cur_path=[]
        helper(root,cur_path,paths)
        return paths
