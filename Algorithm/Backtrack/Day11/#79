79. Word Search

C++:

class Solution {
public:
    bool backtrack(vector<vector<char>>& board, int i, int j, string word){
        if (word.size()==0) return true;
        if (i<0 or j<0 or i>=board.size() or j>=board[0].size() or board[i][j]!=word[0]){
            return false;
        }
        char temp = board[i][j];
        board[i][j] = '#';
        bool found = backtrack(board,i+1,j,word.substr(1)) || 
                     backtrack(board,i-1,j,word.substr(1)) ||
                     backtrack(board,i,j+1,word.substr(1)) || 
                     backtrack(board,i,j-1,word.substr(1));
        board[i][j]=temp;
        return found;    
    }
        
    bool exist(vector<vector<char>>& board, string word) {
        if (board.empty())  return false;
        for (int i=0;i<board.size();++i){
            for (int j=0;j<board[0].size();++j){
                if (backtrack(board,i,j,word))  return true;
            }
        }
        return false;
    }
};

Python:

class Solution(object):
    def backtrack(self,board,i,j,word):
        if len(word) == 0:  return True
        if i<0 or j<0 or i>=len(board) or j>=len(board[0]) or board[i][j]!=word[0]:
            return False
        temp = board[i][j]
        board[i][j] = "#"
        res = self.backtrack(board,i+1,j,word[1:]) or self.backtrack(board,i-1,j,word[1:]) \
            or self.backtrack(board,i,j+1,word[1:]) or self.backtrack(board,i,j-1,word[1:])
        board[i][j]=temp
        return res
    
    
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        if not board:
            return False
        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.backtrack(board,i,j,word):
                    return True
        return False
        
