39. Combination Sum

C++:

class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> path;
        backtrack(res,path,0,candidates,target);
        return res;
    }
private:
    void backtrack(vector<vector<int>>& res, vector<int>& path, int start, vector<int>& candidates, int remain){
        if (remain==0)  res.push_back(path);
        else if (remain>0){
            for (int i=start;i<candidates.size();++i){
                path.push_back(candidates[i]);
                backtrack(res,path,i,candidates,remain-candidates[i]);
                path.pop_back();
            }
        }
    }
};

Python:

class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        res = []
        path = []
        self.backtrack(res,path,0,candidates,target)
        return res
    
    def backtrack(self, res, path, start, candidates, remain):
        if remain==0:
            res.append(path)
        elif remain>0:
            for i in range(start,len(candidates)):
                self.backtrack(res, path+[candidates[i]],i,candidates,remain-candidates[i])
                
        
