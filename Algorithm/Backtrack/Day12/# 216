216. Combination Sum III

C++:

class Solution {
public:
    vector<vector<int>> combinationSum3(int k, int n) {
        if (k==0 || n==0)   return{};
        vector<vector<int>> res;
        vector<int> path;
        backtrack(res,path,1,n,k);
        return res;
    }
private:
    void backtrack(vector<vector<int>>& res, vector<int>& path, int start, int remain, int k){
        if (k==0){
            int sum = 0;
            for (int i=0;i<path.size();++i){
                sum+=path[i]; 
            }
            if (sum == remain)  res.push_back(path);
            return;
        }
        for (int i=start;i<10;++i){
            path.push_back(i);
            backtrack(res,path,i+1,remain,k-1);
            path.pop_back();
        }
    }
};

Python:

class Solution(object):
    def combinationSum3(self, k, n):
        """
        :type k: int
        :type n: int
        :rtype: List[List[int]]
        """
        if not k or not n:
            return
        res = []
        path = []
        self.backtrack(res,path,1,n,k)
        return res;
    
    def backtrack(self,res,path,start,remain,k):
        if remain==0 and len(path)==k:
            res.append(path[:])
        elif remain>0:
            for i in range(start,10):
                self.backtrack(res,path+[i],i+1,remain-i,k)
