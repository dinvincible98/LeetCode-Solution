131. Palindrome Partitioning

C++:

class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> path;
        backtrack(s,path,res);
        return res;
    }
private:
    bool isPal(string s){
        if (s.size()==0)    return true;
        int start = 0, end = s.size()-1;
        while(start<=end){
            if (s[start]!=s[end]){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
    
    void backtrack(string s, vector<string>& path, vector<vector<string>>& res){
        if (s.size()==0){
            res.push_back(path);
            return;
        }
        for (int i=1;i<=s.size();++i){
            string temp = s.substr(0,i);
            if (isPal(temp)){
                path.push_back(temp);
                backtrack(s.substr(i),path,res);
                path.pop_back();
            }
        }
    }
};

Python:

class Solution(object):
    def partition(self, s):
        """
        :type s: str
        :rtype: List[List[str]]
        """
        res = []
        path = []
        self.backtrack(s,path,res)
        return res
        
    
    def isPal(self,s):
        if len(s)==0:   return True
        start = 0
        end = len(s)-1
        while start<=end:
            if s[start]!=s[end]:
                return False
            start += 1
            end -= 1
        return True
    
    def backtrack(self,s,path,res):
        if len(s)==0:
            res.append(path[:])
            return
        for i in range(1,len(s)+1):
            temp = s[0:i]
            if self.isPal(temp):
                path.append(temp)
                self.backtrack(s[i:],path,res)
                path.pop()
                
