# 680. Valid Palindrome II

C++:

class Solution {
public:
    bool checkPalindrome(string& s, int l, int r){
        while(l<=r && s[l]==s[r]){
            l++;r--;
        }
        if(l>r)
            return true;
        return false;
    }
    
    bool validPalindrome(string s) {
        int l = 0; int r = s.length()-1;
        while(l<=r && s[l] == s[r]){
            l++;r--;
        }
        if(l>r)
            return true;
        
        if (checkPalindrome(s,l+1,r) || checkPalindrome(s,l,r-1)) 
            return true;
        return false;
    }
};


C:

bool isPal(char *s , int left, int right){
    while(left<right){
        if (s[left] == s[right]){
            left++;
            right--;
        }
        else{
            return false;
        }
    }
    return true;
}    

bool validPalindrome(char * s){
    int left=0, right=strlen(s)-1;
    while(left < right){
        if (s[left]==s[right]){
            left++;
            right--;        
        }
        else{
            if (isPal(s,left+1,right) || isPal(s,left,right-1)){
            return true;    
            }
            return false;
        }
    }
    return true;
}

Python:

class Solution(object):
    def validPalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        
        def check_palindrome(i, j):
            if i >= j:
                return True
            while i < j:
                if s[i] == s[j]:
                    i += 1
                    j -= 1
                else:
                    return False
            return True
        
        i = 0
        j = len(s)-1
        while i < j:
            if s[i] == s[j]:
                i += 1
                j -= 1
            else:
                if check_palindrome(i+1, j) or check_palindrome(i, j-1):
                    return True
                else:
                    return False
        return True
