130. Surrounded Regions

class Solution {
public:
    void solve(vector<vector<char>>& board) {
        if (board.empty())  return;
        int n = board.size();
        int m = board[0].size();
        
        for (int i=0;i<n;++i)
        {
            for (int j=0;j<m;++j)
            {
                if(board[i][j]=='O' && (i==0 || i==n-1 || j==0 ||j==m-1))
                {
                    dfs(board,i,j,n,m);
                }
            }
        }
        for (int i=0;i<n;++i)
        {
            for (int j=0;j<m;++j)
            {
                if (board[i][j]=='O')    board[i][j]='X';
                if (board[i][j]=='@')    board[i][j]='O';
             }
        }
    }

private:
    void dfs(vector<vector<char>>& board,int i, int j, int n, int m)
    {
        if (i<0 || i>=n || j<0 || j>=m) return ;
        if (board[i][j] == 'O')
        {
            board[i][j] = '@';
            dfs(board,i+1,j,n,m);
            dfs(board,i-1,j,n,m);
            dfs(board,i,j+1,n,m);
            dfs(board,i,j-1,n,m);
        
        }

    }
};

class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        if not board:
            return
        n = len(board)
        m = len(board[0])
        
        for i in range(n):
            for j in range(m):
                if (board[i][j]=='O') and (i==0 or i==n-1 or j==0 or j==m-1):
                    self.dfs(board,i,j,n,m)
        for i in range(n):
            for j in range(m):
                if board[i][j]=='O':
                    board[i][j]='X'
                if board[i][j]=='@':
                    board[i][j]='O'

        
        
        
    
    def dfs(self,board,i,j,n,m):
        if i<0 or i>=n or j<0 or j>=m:
            return
        if board[i][j]=='O':
            board[i][j] = '@'
            self.dfs(board,i+1,j,n,m)
            self.dfs(board,i-1,j,n,m)
            self.dfs(board,i,j+1,n,m)
            self.dfs(board,i,j-1,n,m)
        
