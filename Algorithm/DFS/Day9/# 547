547. Friend Circles

C++:

class Solution {
    
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        vector<bool> visited(isConnected.size(),false);
        int res = 0;
        for (int i=0;i<isConnected.size();++i)
        {
            if (!visited[i])   
            {    
                visited[i] = true;
                dfs(isConnected,i,visited);
                res++;
            }
        }
        return res;
    }
private:
    void dfs(vector<vector<int>>& isConnected, int i, vector<bool>& visited)
    {
        for (int j=0;j<isConnected.size();++j)
        {
            if (isConnected[i][j]==1 && !visited[j])
            {
                visited[j]=true;
                dfs(isConnected,j,visited);
            }
        }
    }
    
};

Python:

class Solution(object):
    def findCircleNum(self, isConnected):
        """
        :type isConnected: List[List[int]]
        :rtype: int
        """
        n = len(isConnected)
        visited = [False] * n
        res = 0
        for i in range(n):
            if visited[i] == False:
                visited[i] = True
                self.dfs(isConnected,i,visited)
                res+=1
        return res
    
    def dfs(self,isConnected,i,visited):
        m = len(isConnected)
        for j in range(m):
            if isConnected[i][j]==1 and visited[j]==False:
                visited[j]= True
                self.dfs(isConnected,j,visited)
