200. Number of Islands

C++:

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {        
        if(grid.size() == 0)    return 0;
        if(grid[0].size() == 0)   return 0;
        int res;
        for (int i=0;i<grid.size();++i)
        {
            for (int j=0;j<grid[0].size();++j)
            {
                if(grid[i][j] == '1')
                {
                    dfs(grid,i,j);
                    res++;
                }
            }
        }
        return res;
    }

private:
    void dfs(vector<vector<char>>& grid, int row, int col)
    {
        if(row<0 || row>=grid.size() || col<0 || col>=grid[0].size() || grid[row][col] == '0') return;
        grid[row][col] = '0';
        dfs(grid,row+1,col);
        dfs(grid,row-1,col);
        dfs(grid,row,col+1);
        dfs(grid,row,col-1);
    }
};


Python:

class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        

        if len(grid)<0: return 0;
        if len(grid[0])<0:  return 0;
        res = 0;
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    self.dfs(grid,i,j)
                    res+=1
        return res
    
    def dfs(self,grid,row,col):
        if row<0 or row>=len(grid) or col<0 or col>=len(grid[0]) or grid[row][col] == '0':
            return 0
        grid[row][col] = '0'
        self.dfs(grid,row+1,col)
        self.dfs(grid,row-1,col)
        self.dfs(grid,row,col+1)
        self.dfs(grid,row,col-1)
