695. Max Area of Island

C++:

class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        
        int global_area=0;
        int local_area;
        for (int i=0;i<grid.size();++i)
        {
            for(int j=0;j<grid[0].size();++j)
            {
                if (grid[i][j]==1)
                {
                    local_area = dfs(grid,i,j);
                    global_area = max(local_area,global_area);
                }
            }
        }
        return global_area;
        
    }

    
private:
    int dfs(vector<vector<int>>& grid,int i,int j)
    {
        if (i<0 || i>=grid.size() || j<0 || j>=grid[0].size() || grid[i][j]==0) return 0;
        grid[i][j] = 0;
        int local_area = 1;
        local_area += dfs(grid,i+1,j);
        local_area += dfs(grid,i-1,j);
        local_area += dfs(grid,i,j+1);
        local_area += dfs(grid,i,j-1);
        
        return local_area;
    }
};
Python:

class Solution(object):
    def maxAreaOfIsland(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        global_area = 0
        local_area = None
        n = len(grid)
        m = len(grid[0])
        for i in range(n):
            for j in range(m):
                if grid[i][j]==1:
                    local_area = self.dfs(grid,i,j)
                    global_area = max(local_area,global_area)
        return global_area
                
        
        
    def dfs(self,grid,i,j):
        if i<0 or i>=len(grid) or j<0 or j>=len(grid[0]) or grid[i][j]==0:
            return 0;
        grid[i][j] = 0
        area = 1
        area += self.dfs(grid,i+1,j)
        area += self.dfs(grid,i-1,j)
        area += self.dfs(grid,i,j+1)
        area += self.dfs(grid,i,j-1)
        
        return area


