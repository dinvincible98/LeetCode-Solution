188. Best Time to Buy and Sell Stock IV

C++:

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        if(prices.empty())  return 0;
        if (k >= prices.size()/2){
            int res = 0;
            for(int i=1;i<prices.size();++i){
                res += max(prices[i] - prices[i-1], 0);
            }
            return res;
        }
        int n = k * 2 + 1;
        vector<int> dp(n, 0);
        for (int i = 1; i < n; i += 2) {
            dp[i] = INT_MIN;
        }
        for (int price : prices) {
            for (int i = 1; i < n; i++) {
                dp[i] = max(dp[i], dp[i - 1] + (i&1 ? (-1 * price) : price));
            }
        }
        return dp[n - 1];
    }
};


Python:

class Solution(object):
    def maxProfit(self, k, prices):
        """
        :type k: int
        :type prices: List[int]
        :rtype: int
        """
        if not prices:
            return 0
        if k >= len(prices)//2:
            return sum(x-y for x, y in zip(prices[1:],prices[:-1]) if x>y)
        profits = [0] * len(prices)
        for j in range(k):
            preprofit = 0
            for i in range(1, len(prices)):
                profit = prices[i] - prices[i-1]
                preprofit = max(preprofit+profit, profits[i])
                profits[i]= max(profits[i-1], preprofit)
        return profits[-1]
                
            
            
        
