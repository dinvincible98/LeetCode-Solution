303. Range Sum Query - Immutable

C++:
class NumArray {
public:
    vector<int> dp;
    NumArray(vector<int>& nums) {
        dp = vector<int> (nums.size()+1, 0);
        for (int i=0;i<nums.size();++i){
            dp[i+1] = dp[i]+nums[i];
        }
    }
    
    int sumRange(int i, int j) {
        return dp[j+1] - dp[i];
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * int param_1 = obj->sumRange(i,j);
 */
 
 Python:
 
 class NumArray(object):

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.nums = nums
        for i in range(1,len(self.nums)):
            self.nums[i] = self.nums[i-1] + self.nums[i]
        

    def sumRange(self, i, j):
        """
        :type i: int
        :type j: int
        :rtype: int
        """
        if (i==0):
            return self.nums[j]
        else:
            return self.nums[j]-self.nums[i-1]
        


# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# param_1 = obj.sumRange(i,j)
