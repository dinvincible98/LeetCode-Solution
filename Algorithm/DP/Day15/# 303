303. Range Sum Query - Immutable

C++:
class NumArray {
public:
    vector<int> dp;
    NumArray(vector<int>& nums) {
        dp = vector<int> (nums.size()+1,0);
        for (int i=0;i<nums.size();++i)
        {
            dp[i+1] = dp[i] + nums[i]; 
        }
        
    }
    
    int sumRange(int left, int right) {
        return dp[right+1] - dp[left];
    }
};

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray* obj = new NumArray(nums);
 * int param_1 = obj->sumRange(i,j);
 */
 
 Python:
 
class NumArray(object):

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        self.dp = [0] * (len(nums)+1)
        for i in range(len(nums)):
            self.dp[i+1] = self.dp[i] + nums[i]
    
        

    def sumRange(self, left, right):
        """
        :type left: int
        :type right: int
        :rtype: int
        """
        return self.dp[right+1]-self.dp[left]
        


# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# param_1 = obj.sumRange(i,j)
