3. Longest Substring Without Repeating Characters

C++:

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> charIndex (256,-1);
        int curlen = 0, res = 0;
        for(int i=0;i<s.size();++i){
            curlen = min(curlen+1, i - charIndex[s[i]]);
            res = max(res, curlen);
            charIndex[s[i]] = i;
        }
        return res;
    }
};


Python:

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s:
            return 0
        dp = [1]*len(s)
        posdic = {s[0]:0}
        longest = 1
        for i in range(1,len(s)):
            if s[i] in posdic:
                dp[i] = min(dp[i-1]+1,i-posdic[s[i]])
            else:
                dp[i] = dp[i-1]+1
            posdic[s[i]] = i
            longest = max(longest,dp[i])
        return longest
                
