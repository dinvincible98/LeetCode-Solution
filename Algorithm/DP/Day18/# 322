322. Coin Change

C++:

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        if (amount<0)   return 0;
        vector<int> dp(amount+1,amount+1);
        dp[0] = 0;
        
        for (int i=1;i<amount+1;++i){
            for (auto coin:coins){
                if (i-coin>=0){
                    dp[i] = min(dp[i],dp[i-coin]+1);
                }
            }
        }
        if (dp[amount]>amount)  return -1;
        return dp[amount];
    }
};

Python:

class Solution(object):
    def coinChange(self, coins, amount):
        """
        :type coins: List[int]
        :type amount: int
        :rtype: int
        """
        if amount<1:
            return 0
        dp = [amount+1] * (amount+1)
        dp[0] = 0
        
        for i in range(1,amount+1):
            for coin in coins:
                if i-coin>=0:
                    dp[i] = min(dp[i], dp[i-coin]+1)
        if dp[amount]>amount:
            return -1
        return dp[amount]
        
