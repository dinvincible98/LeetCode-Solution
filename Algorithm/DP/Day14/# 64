64. Minimum Path Sum

C++:

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> sum(n,vector<int>(m,grid[0][0]));
        for (int i=1;i<n;++i)
        {
            sum[i][0] = sum[i-1][0] + grid[i][0];
        }
        for (int j=1;j<m;++j)
        {
            sum[0][j] = sum[0][j-1] + grid[0][j];
        }
        for (int i=1;i<n;++i)
        {
            for (int j=1;j<m;++j)
            {
                sum[i][j] = min(sum[i-1][j],sum[i][j-1]) + grid[i][j];
            }
        }
        return sum[n-1][m-1];
    }
};

Python:

class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        n = len(grid)
        m = len(grid[0])
    
        for i in range (1,n):
            grid[i][0] = grid[i-1][0] + grid[i][0]
        for j in range(1,m):
            grid[0][j] = grid[0][j-1] + grid[0][j]
        for i in range(1,n):
            for j in range(1,m):
                grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j]
        return grid[-1][-1]
