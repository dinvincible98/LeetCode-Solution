64. Minimum Path Sum

C++:

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size(); 
        vector<vector<int> > sum(m, vector<int>(n, grid[0][0]));
        for (int i = 1; i < m; i++)
            sum[i][0] = sum[i - 1][0] + grid[i][0];
        for (int j = 1; j < n; j++)
            sum[0][j] = sum[0][j - 1] + grid[0][j];
        for (int i = 1; i < m; i++)
            for (int j = 1; j < n; j++)
                sum[i][j]  = min(sum[i - 1][j], sum[i][j - 1]) + grid[i][j];
        return sum[m - 1][n - 1];
    }
};

Python:

class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        n = len(grid)
        m = len(grid[0])
        
        for i in range(1,m):
            grid[0][i] = grid[0][i-1]+grid[0][i]
        
        for j in range(1,n):
            grid[j][0] = grid[j-1][0]+grid[j][0]
        
        for i in range(1,n):
            for j in range(1,m):
                grid[i][j]= min(grid[i-1][j],grid[i][j-1])+grid[i][j]
        
        return grid[-1][-1]
