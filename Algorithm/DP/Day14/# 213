213. House Robber II

C++:

class Solution {
public:
    int rob(vector<int>& nums) {
        if (nums.size()==0) return 0;
        if (nums.size()==1) return nums[0];
        vector<int> A(nums.begin()+1,nums.end());
        vector<int> B(nums.begin(),nums.end()-1);
        return (max(robber(A),robber(B)));
    }
private:
    int robber(vector<int>& nums){
        int dp1 = 0, dp2 = 0;
        for (int i=0;i<nums.size();++i){
            int temp = max(dp1,dp2+nums[i]);
            dp2 = dp1;
            dp1 = temp;
        }
        return dp1;
    }
};

Python:

class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums)==0: return 0
        if len(nums)==1: return nums[0]
        if len(nums)==2: return max(nums)
        
        def dp(start,stop,nums):
            n = nums[start:stop+1]
            dp = [0] * len(n)
            dp[0], dp[1] = n[0], max(n[0],n[1])
            for i in range(2,len(n)):
                dp[i] = max(dp[i-1],dp[i-2]+n[i])
            return dp[-1]
        return max(dp(0,len(nums)-2,nums),dp(1,len(nums)-1,nums))
