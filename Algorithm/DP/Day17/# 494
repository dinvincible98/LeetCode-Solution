494. Target Sum

C++:

class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) {
        int n = nums.size();
        int sum = 0;
        for (int i=0;i<n;++i){
            sum+=nums[i];
        }
        if (sum<S)  return 0;
        vector<vector<int>> dp(n+1, vector<int>(2*sum+1,0));
        dp[0][sum] = 1;
        
        for (int i=0;i<n;++i){
            for (int j=nums[i];j<2*sum+1-nums[i];++j){
                dp[i+1][j+nums[i]] += dp[i][j];
                dp[i+1][j-nums[i]] += dp[i][j];
            }
        }
        return dp[n][sum+S];
    }
};

Python:

class Solution(object):
    def findTargetSumWays(self, nums, S):
        """
        :type nums: List[int]
        :type S: int
        :rtype: int
        """
        n = len(nums)
        s = sum(nums)
        if s < S:   return 0
        dp = [[0] * (2*s+1) for i in range (n+1)]
        dp[0][s] = 1
        
        for i in range(n):
            for j in range(nums[i], 2*s+1-nums[i]):
                if dp[i][j]:
                    dp[i+1][j+nums[i]] += dp[i][j]
                    dp[i+1][j-nums[i]] += dp[i][j]
        return dp[-1][s+S]
