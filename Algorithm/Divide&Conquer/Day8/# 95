95. Unique Binary Search Trees II

C++:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> backtrack(int lower,int upper){
        vector<TreeNode*> res;
        if (lower>upper){
            res.push_back(NULL);
            return res;
        }
        for (int i=lower;i<=upper;++i){
            vector<TreeNode*> left_res = backtrack(lower, i-1);
            vector<TreeNode*> right_res = backtrack(i+1, upper);
            for (auto left:left_res){
                for (auto right:right_res){
                    TreeNode* root = new TreeNode(i);
                    root->left = left;
                    root->right = right;
                    res.push_back(root);
                }
            }
        }
        return res;
    }
    vector<TreeNode*> generateTrees(int n) {
        if (n == 0) return {};
        return backtrack(1,n);
    }
};

Python:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    
    def backtrack(self,lower,upper):
        if upper<lower:
            return [None]
        elif lower==upper:
            node = TreeNode(lower)
            return [node]
        res = []
        
        for i in range(lower,upper+1):
            left_res = self.backtrack(lower, i-1)
            right_res = self.backtrack(i+1, upper)
            for l in left_res:
                for r in right_res:
                    node = TreeNode(i)
                    node.left = l
                    node.right = r
                    res.append(node)
        return res
    
    def generateTrees(self, n):
        """
        :type n: int
        :rtype: List[TreeNode]
        """
        if n==0:    return []
        return self.backtrack(1,n)
