//C++:

/**
 * // This is the BinaryMatrix's API interface.
 * // You should not implement it, or speculate about its implementation
 * class BinaryMatrix {
 *   public:
 *     int get(int row, int col);
 *     vector<int> dimensions();
 * };
 */

class Solution {
public:
    int leftMostColumnWithOne(BinaryMatrix &binaryMatrix) {
        vector<int> shape = binaryMatrix.dimensions();
        int m = shape[0], n = shape[1];
        
        int left = 0, right = n-1, res = -1;
        
        while (left <= right)
        {
            int mid = left + (right-left)/2;        // mid idx
            if (existOne(binaryMatrix,m,mid))       // check entire column
            {
                res = mid;
                right = mid-1;  // keep seach left side
            }
            else    left = mid+1;       // keep seach right side
        }
        
        return res;
    
    }
    
    
private:
    bool existOne(BinaryMatrix &m, int r, int c)
    {
        for (int i=0;i<r;++i)
        {
            if(m.get(i,c) == 1)    return true;
        }
        return false;
    }
    
};
