// c++

class Solution {
public:
    int largestIsland(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        
        int res = 0, next_color = 2;
        for (int i=0;i<m;++i)
        {
            for (int j=0;j<n;++j)
            {
                if (grid[i][j] != 1)    continue;       // empty grid
                paint(grid,i,j,next_color++);
                res = max(res,component_size[next_color-1]);
            }
        }
        
        for (int i=0;i<m;++i)
        {
            for (int j=0;j<n;++j)
            {
                if(grid[i][j] != 0) continue;
                unordered_set<int> neighbor_colors;
                // find all neighbor colors
                for (auto& d:dire)
                {
                    int n_i = i+d[0], n_j = j+d[1];
                    if (n_i<0 || n_i==m || n_j<0 || n_j==n || grid[n_i][n_j]==0)    continue;
                    neighbor_colors.insert(grid[n_i][n_j]);                
                }
                
                int size_formed = 1;            // initial size with 1
                for (auto c:neighbor_colors) size_formed += component_size[c];
                
                res = max(res, size_formed);
                
            }
        }
        return res;
        
        
    }
private:
    // Dfs
    void paint(vector<vector<int>> &grid, int i, int j, int color)
    {
        if(i<0 || i==grid.size() || j<0 || j==grid[0].size() || grid[i][j]!=1)  return;
        grid[i][j] = color;
        component_size[color]++;            // use map tp track the size of island
        
        for (auto& d:dire)
        {
            paint(grid,i+d[0],j+d[1],color);
        }
    }
    
    vector<vector<int>> dire{{1,0},{-1,0},{0,1},{0,-1}};
    
    unordered_map<int,int> component_size;
};
