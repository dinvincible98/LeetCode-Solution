// c++

class Solution {
public:
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        vector<string> res;
        unordered_set<string> S;
        
        for (auto &w:wordDict)  S.insert(w);
        
        dfs(0,s,"",S,res);
        
        return res;
        
    }
private:
    void dfs(int idx, string s, string curr, unordered_set<string> S,vector<string> &res)
    {
        if (idx == s.size())
        {
            curr.pop_back();            // remove trailing space
            res.push_back(curr);
        }
        
        string str = "";
        
        for (int i=idx;i<s.size();++i)
        {
            str.push_back(s[i]);
            if (S.find(str) != S.end())
            {
                dfs(i+1,s,curr+str+" ",S,res);
            }
        }   
    }
    
};
