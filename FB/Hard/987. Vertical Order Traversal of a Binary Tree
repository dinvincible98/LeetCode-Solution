// c++

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 

// BFS 

 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int,map<int,multiset<int>>> mp;
        queue<pair<TreeNode*, pair<int,int>>> q;
        
        q.push({root,{0,0}});
        
        while (!q.empty())
        {
            auto p = q.front();
            q.pop();
            
            auto node = p.first;
            auto x = p.second.first, y = p.second.second;
            
            mp[y][x].insert(node->val); 
                
            if (node->left) q.push({node->left,{x+1,y-1}});
            if (node->right)    q.push({node->right,{x+1,y+1}});
        }
        
        vector<vector<int>> res;
        for (auto &it:mp)
        {
            vector<int> col;
            for (auto &s:it.second)
            {
                col.insert(col.end(),s.second.begin(),s.second.end());
            }
            res.push_back(col);
        }
        return res;
    }
};
 
 
 
 
 
 
 
// DFS

class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int,map<int,multiset<int>>> mp;
        
        dfs(root, 0,0,mp);
        
        vector<vector<int>> res;
        for (auto &p:mp)
        {
            vector<int> col;
            for (auto q:p.second)
            {
                col.insert(col.end(),q.second.begin(),q.second.end());
            }
            res.push_back(col);
            
        }
        
        return res;
        
    }
    
private:
    void dfs(TreeNode *root, int x, int y, map<int,map<int,multiset<int>>> &mp)
    {
        if (!root)  return;
        else
        {
            mp[y][x].insert(root->val);
            dfs(root->left,x+1,y-1,mp);         // left subtree
            dfs(root->right,x+1,y+1,mp);         // right subtree
        }
    }
    
};
