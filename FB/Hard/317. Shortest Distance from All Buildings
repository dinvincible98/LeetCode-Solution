// c++

class Solution {
public:
    int shortestDistance(vector<vector<int>>& grid) {
        int m = grid.size(), n= grid[0].size();
        
        int min_dist = INT_MAX;
        
        vector<vector<int>> dirs {{1,0},{0,1},{-1,0},{0,-1}};
        
        int target = 0;
        
        vector<vector<int>> dist(m,vector<int>(n,0));
        
        for(int i=0;i<m;++i)
        {
            for(int j=0;j<n;++j)
            {
                if (grid[i][j] != 1)    continue;
                
                min_dist = INT_MAX;
                queue<pair<int,int>> q;
                q.push(make_pair(i,j));
                int level = 1;
                
                while (!q.empty())
                {
                    int size = q.size();
                    for (int k=0;k<size;++k)
                    {
                        auto curr = q.front();
                        q.pop();
                        
                        for (auto& d:dirs)
                        {
                            int a = curr.first+d[0];
                            int b = curr.second+d[1];
                            
                             if(a == m || b == n || a == -1 || b == -1) continue;
                            
                            if (grid[a][b] == target)
                            {
                                q.push(make_pair(a,b));
                                grid[a][b]--;
                                dist[a][b] += level;
                                min_dist = min(min_dist,dist[a][b]);
                            }
                        }
                    }
                    
                    level++;
                }
                target--;
            }
        }
        
        return min_dist == INT_MAX? -1:min_dist;

    }
};
