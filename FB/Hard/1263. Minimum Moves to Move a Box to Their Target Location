// c++

class Solution {
public:
    int minPushBox(vector<vector<char>>& grid) {
        int m = grid.size(), n = grid[0].size();
        queue<pair<int,int>> q;         //store next valid box pos: player,box
        unordered_set<string> v;
        
        int src = 0, dst = 0, player = 0;
        
        for (int i=0;i<m;++i)
        {
            for (int j=0;j<n;++j)
            {
                if (grid[i][j] == 'S')
                {
                    player = i*n+j;
                    grid[i][j] = '.';
                }
                if (grid[i][j] == 'B')
                {
                    src = i*n+j;
                    grid[i][j] = '.';
                }
                if (grid[i][j] == 'T')
                {
                    dst = i*n+j;
                    grid[i][j] = '.';
                }
            }
        }
        
        if (src == dst) return 0;   // if box pos == target pos return 0
        
        q.push({src,player});       // box pos and player pos
        int step = 0;

        while (!q.empty())
        {
            int sz = q.size();
            // every pair of {box, player}
            while (sz--)        
            {
                auto pos = q.front();
                q.pop();
                int box_pos = pos.first, player_pos = pos.second;
                if (box_pos == dst) return step;        // box reaches target pos
                int xb = box_pos/n, yb = box_pos%n;     // x, y pos of box;   
                
                for (auto &d:dire)
                {
                    int x = xb+d[0], y = yb+d[1];       // new box pos
                    int xp = xb-d[0], yp = yb-d[1];     // new player pos?
                    if (x<0 || y<0 || x>=m || y>=n || grid[x][y]=='#')  continue;
                    if (xp<0 || yp<0 || xp>=m || yp>=n || grid[xp][yp]=='#') continue;
                    string s = to_string(box_pos)+"," + to_string(xp*n+yp); //  box pos + player pos
                    if(v.count(s))  continue;
                    // check if player can access
                    if(can_access(grid,player_pos,xp*n+yp,box_pos))
                    {
                        q.push({x*n+y,box_pos});    // make a push, box to new , player to box
                        v.insert(s);  
                    }
                }
            }
            step++;
        }
        return -1;
    }
    
private:
    bool can_access(vector<vector<char>> &grid,int src, int dst,int box_pos)
    {
        int m = grid.size(), n = grid[0].size();
        queue<int> q;
        vector<bool> v(m*n);
        q.push(src);
        v[src] = 1;
        grid[box_pos/n][box_pos%n] = '#';
        
        while (!q.empty())
        {
            int sz = q.size();
            while (sz--)
            {
                int p = q.front();
                q.pop();
                if(p == dst)
                {
                    grid[box_pos/n][box_pos%n] = '.';
                    return true;
                }
                
                int x0= p/n, y0 = p%n;
                
                for (auto &d:dire)
                {
                    int x = x0+d[0], y = y0+d[1];               // new box pos
                    if(x<0 || y<0 || x>=m || y>=n || grid[x][y]!='.' || v[x*n+y])   continue;
                    v[x*n+y] = 1;
                    q.push(x*n+y);
                }
            }
        }
        grid[box_pos/n][box_pos%n] = '.';
        
        return false;
        
    }
    
    vector<vector<int>> dire {{1,0},{-1,0},{0,1},{0,-1}};
        
    
};
