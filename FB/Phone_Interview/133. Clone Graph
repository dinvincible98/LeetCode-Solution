//C++:

// BFS
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if(!node)   return nullptr;
        
        unordered_map<Node *,Node *> mp;
        
        mp[node] = new Node(node->val,{});      // copy
        
        queue<Node *> q;
        
        q.push(node);
        
        while (!q.empty())
        {
            auto curr = q.front();
            q.pop();
            for (auto& n:curr->neighbors)
            {
                if(mp.find(n) == mp.end())
                {
                    mp[n] = new Node(n->val,{});
                    q.push(n);
                }
                mp[curr]->neighbors.push_back(mp[n]);

            }
        }
        
        return mp[node];
        
    }

};

// DFS
/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {        
        if(!node)   return nullptr;
        
        if(mp.find(node) == mp.end())
        {
            mp[node] = new Node(node->val,{});
            
            for (Node* n:node->neighbors)
            {
                mp[node]->neighbors.push_back(cloneGraph(n));
            }
        }
        
        return mp[node];
    }
private:
    unordered_map<Node *,Node *> mp;
};
