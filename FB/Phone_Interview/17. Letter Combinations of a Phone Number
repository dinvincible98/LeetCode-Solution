//C++:

class Solution {
public:
    vector<string> letterCombinations(string digits) {
        if(digits.empty()) return {};
        
        vector<string> res{""};

        
        for (auto& d:digits)
        {
            vector<string> temp;
            for (auto& c:list[d-'0'])
            {
                for (auto& r:res)
                {
                    temp.push_back(r + c);
                }
            }
            
            res.swap(temp);
        }
        
        return res;
        
        
        
    }
private:
    const vector<string> list{"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
};


// Backtrack
class Solution {
public:
    vector<string> res;
    map<char, string> mp;
    
    void backtrack(int i,string digits, string comps){
        if (i==digits.size()){
            res.push_back(comps);
            return;
        }
        for (int j=0;j<mp[digits[i]].size();++j){
            backtrack(i+1, digits, comps+mp[digits[i]][j]);
        }
    }
    
    
    vector<string> letterCombinations(string digits) {
        mp['2'] = "abc";
        mp['3'] = "def";
        mp['4'] = "ghi";
        mp['5'] = "jkl";
        mp['6'] = "mno";
        mp['7'] = "pqrs";
        mp['8'] = "tuv";
        mp['9'] = "wxyz";
        if (digits.empty()) return {};
        backtrack(0,digits,"");
        return res;
        
    }
};
