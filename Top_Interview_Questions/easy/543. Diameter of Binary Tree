//C++:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        int max_len = 0;
        dfs(root,max_len);
        
        return max_len;
    }
private:
    int dfs(TreeNode* root, int &max_len)
    {
        if(!root)   return 0;
        
        int left_len = dfs(root->left,max_len);
        int right_len = dfs(root->right,max_len);
        
        max_len = max(max_len,left_len+right_len);
        
        
        return 1+max(left_len,right_len);
    }

};
// TC: O(n)
// SC: O(n)
