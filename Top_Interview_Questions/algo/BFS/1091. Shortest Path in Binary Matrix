//C++:
class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        if(grid.empty())    return -1;
        
        const int m = grid.size();
        const int n = grid[0].size();
        
        if(grid[0][0]==1 || grid[m-1][n-1]==1)  return -1;
        
        vector<vector<int>> dirs{{1,0},{-1,0},{0,-1},{0,1},{1,1},{1,-1},{-1,1},{-1,-1}};
        queue<pair<int,int>> q;
        q.push({0,0});
        
        int step = 0;
        
        while (!q.empty())
        {
            int sz = q.size();
            ++step;
            while (sz--)
            {
                auto [x,y] = q.front();
                q.pop();
                
                if(grid[x][y] == 1) continue;
                if(x==m-1 && y==n-1)    return step;
                
                grid[x][y] = 1;
                
                for (auto& d:dirs)
                {
                    int nx = x + d[0];
                    int ny = y + d[1];
                    
                    if(nx<0 || ny<0 || nx>=m || ny>=n)  continue;

                    q.push({nx,ny});
                }
            }
        }
        
        return -1;
    }
};

// TC: O(n)
// SC: O(n)
