//C++:
class Solution {
public:
    int minKnightMoves(int x, int y) {
        vector<vector<int>> dirs{{1,2},{2,1},{-1,2},{-2,1},{-2,-1},{-1,-2},{2,-1},{1,-2}};
        
        x = abs(x);
        y = abs(y);
        
        queue<pair<int,int>> q;
        q.push({0,0});
        
        set<pair<int,int>> visited;
        visited.insert({0,0});
        
        int move = 0;
        
        while (!q.empty())
        {
            int sz = q.size();
            for (int i=0;i<sz;++i)
            {
                auto p = q.front();
                q.pop();

                int curr_x = p.first, curr_y = p.second;  
                
                if(curr_x==x && curr_y==y)  return move;
                
                for (auto& d:dirs)
                {
                    int nx = curr_x + d[0];
                    int ny = curr_y + d[1];
                    
                    if(nx<-2 || ny<-2)  continue;
                    if(nx>x+2 || ny>y+2)    continue;
                    if(visited.count({nx,ny}))  continue;
                    
                    visited.insert({nx,ny});
                    q.push({nx,ny});
                }   
            }
            move++;
        }
        
        return 0;
        
        
    }
};
// TC: O(max(x,y)^2)
// SC: O(max(x,y)^2)
