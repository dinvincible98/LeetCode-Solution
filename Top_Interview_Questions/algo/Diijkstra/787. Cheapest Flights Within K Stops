//C++:
class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<int>> m(n,vector<int>(n,0));
        for (auto& f:flights)
        {
            m[f[0]][f[1]] = f[2];
        }
        
        vector<int> dist(n, INT_MAX);
        vector<int> curr_stop(n, INT_MAX);
        
        dist[src]= 0;
        curr_stop[src] = 0;
        
        typedef tuple<int,int,int> tii;
        priority_queue<tii,vector<tii>,greater<tii>> pq;    // min-heap <cost,node,stop>
        
        pq.push({0,src,0});     
        while (!pq.empty())
        {
            auto [cost, node, stop]= pq.top();
            pq.pop();
            
            if(node == dst) return cost;
            if(stop == k+1)   continue;       // no stops, skip rest
            
            for (int i=0;i<n;++i)
            {
                if(m[node][i] > 0)
                {
                    // better cost
                    if(cost+m[node][i] < dist[i])
                    {
                        dist[i] = cost + m[node][i];
                        pq.push({cost+m[node][i],i,stop+1});
                    }
                    else if (stop < curr_stop[i])       // better steps
                    {
                        pq.push({cost+m[node][i],i,stop+1});
                    }
                    curr_stop[i] = stop;
                }
            }
        }
        
        return dist[dst]==INT_MAX? -1:dist[dst];        
    }
};
// TC: O(v^2*logv)
// SC: O(v^2)
