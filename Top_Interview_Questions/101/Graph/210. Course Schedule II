//C++:
class Solution {
public:
    vector<int> findOrder(int n, vector<vector<int>>& p) {
        vector<vector<int>> graph(n);
        
        vector<int> re_classes(n,0);        // <idx, num of classes required>
        for (auto& it:p)
        {
            graph[it[1]].push_back(it[0]);
            re_classes[it[0]]++;
        }
        
        queue<int> q;
        
        for(int i=0;i<n;++i)
        {
            if(re_classes[i] == 0)  q.push(i);  
        }
        
        vector<int> res;
        while(!q.empty())
        {
            int x = q.front();
            q.pop();
            res.push_back(x);
            
            for(auto& v:graph[x])
            {
                if(--re_classes[v] == 0)    q.push(v);
            }
        }
        
        return res.size()==n? res:vector<int>();
    }

// TC: O(v+e)
// SC: O(v)
