//C++:
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int left=0, right=nums.size()-1, target=nums.size()-k;
        
        while (left < right)
        {
            int mid = quickSelect(nums,left,right);
            if(mid == target)   return nums[mid];
            if(mid < target)    left = mid+1;
            else    right = mid-1;
        }
        
        return nums[left];
    }

private:
    int quickSelect(vector<int>& nums,int left, int right)
    {
        int i = left+1, j = right;
        
        while (1)
        {
            while(i<right && nums[i]<=nums[left])  ++i;
            while(left<j && nums[j]>=nums[left])   --j;
            if(i >= j)  break;
            swap(nums[i],nums[j]);
        }
        
        swap(nums[left],nums[j]);
        
        return j;
    }
    
    
};

// TC: O(n)
// SC: O(1)

// 2 
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int,vector<int>,greater<int>> pq;
        
        for (int i=0;i<nums.size();++i)
        {
            if(pq.size()==k)
            {
                int x = pq.top();
                if(nums[i] > x)
                {
                    pq.pop();
                    pq.push(nums[i]);
                }
            }
            else    pq.push(nums[i]);
        }
        
        
        return pq.top();
        
    }
};
// TC: O(nlogk)
// SC: O(k)
