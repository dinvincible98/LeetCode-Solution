//C++:
class Solution {
public:
    string minWindow(string s, string t) {
        vector<int> chars(128,0);
        
        for (auto& c:t) chars[c]++; // cnt char in t
        
        int start = 0, end = 0;
        int cnt = t.size();
        int min_start = 0, min_len = INT_MAX;
        
        while(end < s.size())
        {
            if(chars[s[end]] > 0)   cnt--;      // char in s exist in t
            chars[s[end]]--;            // decrease cnt
            end++;
            
            // found a valid window, searcg for smaller window
            while(cnt == 0)
            {
                if(end-start < min_len)
                {
                    min_start = start;
                    min_len = end - start;
                }
                chars[s[start]]++;      // add cnt 
                
                if(chars[s[start]] > 0) cnt++;
                start++;
            }
        }
        return min_len!=INT_MAX? s.substr(min_start,min_len):"";
    }
};
// TC: O(s+t)
// SC: O(s+t)
