//C++:
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if(nums1.size() > nums2.size()) swap(nums1,nums2);
        
        int n1 = nums1.size(), n2 = nums2.size();
        
        int left = 0 , right = n1;
        
        while (left <= right)
        {
            int cut1 = (left+right)/2;
            int cut2 = (n1+n2)/2 - cut1;
            
            int l1 = cut1==0? INT_MIN:nums1[cut1-1];
            int l2 = cut2==0? INT_MIN:nums2[cut2-1];
            
            int r1 = cut1==n1? INT_MAX:nums1[cut1];
            int r2 = cut2==n2? INT_MAX:nums2[cut2];
            
            if(l1 > r2) right = cut1 - 1;       // too large
            else if(l2 > r1)    left = cut1 + 1;    // too small
            else    return (n1+n2)%2? min(r1,r2):(max(l1,l2)+min(r1,r2))/2.;
        }
        
        return -1;
        
    }
};
// TC: O(logn)
// SC: O(1)
