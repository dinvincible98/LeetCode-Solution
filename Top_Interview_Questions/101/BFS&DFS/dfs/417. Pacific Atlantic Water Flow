//C++:
class Solution {
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        const int m = heights.size();
        const int n = heights[0].size();
        
        vector<vector<bool>> atlantic(m,vector<bool>(n,false));
        vector<vector<bool>> pacific(m,vector<bool>(n,false));
        
        // search in rows
        for (int i=0;i<m;++i)   
        {
            dfs(heights,m,n,i,0,pacific);
            dfs(heights,m,n,i,n-1,atlantic);
        }
        
        // search in cols
        for (int j=0;j<n;++j)
        {
            dfs(heights,m,n,0,j,pacific);
            dfs(heights,m,n,m-1,j,atlantic);
        }
        
        vector<vector<int>> res;
        for (int i=0;i<m;++i)
        {
            for (int j=0;j<n;++j)
            {
                if(atlantic[i][j] && pacific[i][j]) res.push_back({i,j});   // both reachable
            }
        }
        
        return res;
        
        
    }
    
private:
    const vector<vector<int>> dirs{{1,0},{-1,0},{0,1},{0,-1}};
    
    void dfs(vector<vector<int>>& heights,int m,int n,int i, int j,vector<vector<bool>>& reach)
    {
        
        reach[i][j] = true;
        
        for (auto& d:dirs)
        {
            int nx = i+d[0];
            int ny = j+d[1];
            
            if(nx<0 || ny<0 || nx>=m || ny>=n || reach[nx][ny] || heights[nx][ny]<heights[i][j])    continue;   // not spainning if the neighbors is smaller
            
            dfs(heights,m,n,nx,ny,reach);
        }
    }
    
    
};

// TC: O(m*n)
// SC: O(m*n)
