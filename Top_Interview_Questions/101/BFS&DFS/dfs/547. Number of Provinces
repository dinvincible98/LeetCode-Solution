//C++:
class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<bool> visited(n,false);
        
        int cnt = 0;
        for (int i=0;i<n;++i)
        {
            if(!visited[i])
            {
                visited[i] = true;
                dfs(isConnected, visited, i);
                ++cnt; 
            }
        }
        
        return cnt;
    }
    
private:
    void dfs(vector<vector<int>>& isConnected, vector<bool>& visited, int i)
    {
        int n = isConnected[i].size();
        
        for (int j=0;j<n;++j)
        {
            if(!visited[j] && isConnected[i][j]==1)         // isconnected
            {
                visited[j] = true;
                dfs(isConnected,visited,j);
            }
        }
        
        
    }
    
// TC: O(n^2)
// SC: O(n)
