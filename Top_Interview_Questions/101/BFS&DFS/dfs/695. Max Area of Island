//C++:
class Solution {
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        const int m = grid.size();
        const int n = grid[0].size();
        
        int max_area = 0;
        int local_area;
        for (int i=0;i<m;++i)
        {
            for(int j=0;j<n;++j)
            {
                if(grid[i][j] == 1)
                {
                    local_area = dfs(grid,m,n,i,j);
                    max_area = max(max_area,local_area); 
                }
            }
        }
        
        return max_area;
        
        
    }
    
private:
    int dfs(vector<vector<int>>& grid, int m, int n, int i, int j)
    {
        if(i<0 || j<0 || i>=m || j>=n || grid[i][j]!=1) return 0;
        
        grid[i][j] = 0;     // not search back
        int cnt = 1;
        
        cnt += dfs(grid,m,n,i+1,j);
        cnt += dfs(grid,m,n,i-1,j);
        cnt += dfs(grid,m,n,i,j+1);
        cnt += dfs(grid,m,n,i,j-1);
        
        return cnt;
        
    }
    
};
// TC: O(m*n)
// SC: O(m*n)
