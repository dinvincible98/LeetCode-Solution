//C++:
class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& nums, int target) {
        vector<vector<int>> res;
        vector<int> path;
        
        sort(nums.begin(),nums.end());
        
        backtrack(nums,res,path,target, 0);
        
        return res;
        
    }
    
private:
    void backtrack(vector<int>& nums,vector<vector<int>>& res, vector<int>& path, int target,int idx)
    {
        if(target < 0)    return;
        if(target == 0) res.push_back(path);
        else
        {
            for(int i=idx;i<nums.size();++i)
            {
                if(i>idx && nums[i]==nums[i-1]) continue;   // avoid duplicate
                path.push_back(nums[i]);
                backtrack(nums,res,path,target-nums[i],i+1);
                path.pop_back();
            }
        }
    }
    
};
// TC: O(2^n)
// SC: O(n)
