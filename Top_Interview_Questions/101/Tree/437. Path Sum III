//C++:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int pathSum(TreeNode* root, int targetSum) {
        int cnt = 0;
        
        dfs(root,0,targetSum,cnt);
        return cnt;
        
    }
    
private:
    unordered_map<int,int> mp;  // <curr_sum, times>
    
    void dfs(TreeNode* root,int curr_sum, int target_sum,int& cnt)
    {
        if(!root)   return;
        
        curr_sum += root->val;
        
        if(curr_sum == target_sum)  ++cnt;
        cnt += mp[curr_sum - target_sum];
        mp[curr_sum]++;
        
        dfs(root->left,curr_sum,target_sum,cnt);
        dfs(root->right,curr_sum,target_sum,cnt);
        
        mp[curr_sum]--;
        
    }
    
};

// TC: O(n)
// SC: O(1)
