//C++:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = inorder.size();
        for(int i=0;i<n;++i)
        {
            mp[inorder[i]] = i;
        }
        
        return helper(preorder,0,n-1);
        
    }
    
private:
    int idx = 0;
    unordered_map<int,int> mp;
    
    TreeNode* helper(vector<int>& preorder,int start, int end)
    {
        if(start > end) return nullptr;
        int i = mp[preorder[idx]];
        
        // construct preorder tree
        TreeNode* node = new TreeNode(preorder[idx++]);
        node->left = helper(preorder,start,i-1);
        node->right = helper(preorder,i+1,end);
        
        return node;
        
    }
    
    
};

// TC: O(n)
// SC: O(1)
