//C++:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxPathSum(TreeNode* root) {
        int max_sum = INT_MIN;
        max_gain(root,max_sum);
        
        return max_sum;
    }
private:
    int max_gain(TreeNode* root, int& max_sum)
    {
        if(!root)   return 0;
        
        // max sum of each subtrees
        int left_gain = max(max_gain(root->left,max_sum),0);
        int right_gain = max(max_gain(root->right,max_sum),0);
        
        // new path sum
        int new_sum = root->val + left_gain + right_gain; 
        
        // track the largest sum
        max_sum = max(max_sum, new_sum);
        
        return root->val + max(left_gain, right_gain);
    }

};

// TC: O(n) n is num of nodes
// SC: O(h)	h is height of tree
