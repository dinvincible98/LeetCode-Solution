//C++:
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> S{wordList.begin(),wordList.end()};
        unordered_map<string,int> mp;       // <word,num of transformation>
        
        mp[beginWord] = 1;
        
        if (!S.count(endWord))   return 0;
        if (beginWord == endWord)   return 1;
        
        queue<string> q;
        q.push(beginWord);
        
        while (!q.empty())
        {
            
            string curr = q.front();
            q.pop();
            
            for (int i=0;i<curr.size();++i)
            {
                for (int j='a';j<='z';++j)
                {
                    string temp = curr;
                    temp[i] = j;
                    
                    if (temp == endWord)    return mp[curr]+1;
                    if (!mp.count(temp) && S.count(temp))
                    {
                        mp[temp] = mp[curr]+1;
                        q.push(temp);
                    }
                }
            }
        }
        
        return 0;
    }
};

// TC: O(m^2*n)
// SC: O(m^2*n)
