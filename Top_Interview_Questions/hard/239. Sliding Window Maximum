//C++:
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> res;
        deque<int> dq;
        
        
        for (int i=0;i<nums.size();++i)
        {
            while (!dq.empty() && i-k==dq.front())   dq.pop_front(); // reach maximum size, pop frontmost
            
            while (!dq.empty() && nums[dq.back()] < nums[i])    dq.pop_back();  // keep tracking the largest num            
            dq.push_back(i);
            if(i >= k-1)    res.push_back(nums[dq.front()]);    // dq.front() is always the idx for maximum num
        }
        
        
        return res;
    }
};

// TC: O(n)
// SC: O(n)
