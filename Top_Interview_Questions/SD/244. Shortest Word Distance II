//C++:
class WordDistance {
public:
    WordDistance(vector<string>& wordsDict) {
        for(int i=0;i<wordsDict.size();++i)
        {
            mp[wordsDict[i]].push_back(i);
        }
    }
    
    int shortest(string word1, string word2) {
        int i=0;
        int j=0;
        int min_dist = INT_MAX;
        
        while (i<mp[word1].size() && j<mp[word2].size())
        {
            min_dist = min(min_dist, abs(mp[word1][i] - mp[word2][j]));
            mp[word1][i] < mp[word2][j]? i++:j++;
        }
        
        return min_dist;
    }
private:
    unordered_map<string,vector<int>> mp;
    
};

/**
 * Your WordDistance object will be instantiated and called as such:
 * WordDistance* obj = new WordDistance(wordsDict);
 * int param_1 = obj->shortest(word1,word2);
 */

// TC: O(n)
// SC: O((n)
