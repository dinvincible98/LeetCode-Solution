//C++:
class Trie {
public:
    Trie() {
        
    }
    
    void insert(string word) {
        Trie* node = this;
        for (auto& c:word)
        {
            if(!node->mp.count(c))  node->mp[c] = new Trie();
            node = node->mp[c];
        }
        node->is_word = true;
    }
    
    bool search(string word) {
        Trie* node = this;
        for (auto& c:word)
        {
            if(!node->mp.count(c))  return false;
            node = node->mp[c];
        }
        return node->is_word;
    }
    
    bool startsWith(string prefix) {
        Trie* node = this;
        for (auto& c:prefix)
        {
            if(!node->mp.count(c))  return false;
            node = node->mp[c];
        }
        
        return true;
    }
    
private:
    unordered_map<char,Trie*> mp;
    bool is_word = false;
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */

// TC: O(l)
// SC: O(l)
