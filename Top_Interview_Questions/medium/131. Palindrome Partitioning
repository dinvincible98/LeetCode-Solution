//C++:
class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> path;
        
        backtrack(res,path,s,0);
        return res;
    }
private:
    void backtrack(vector<vector<string>>& res, vector<string>& path,string s, int idx)
    {
        if(idx >= s.size())
        {
            res.push_back(path);
        }
        for (int i=idx;i<s.size();++i)
        {
            if(isPal(s,idx,i))
            {
                path.push_back(s.substr(idx,i-idx+1));
                backtrack(res,path,s,i+1);
                path.pop_back();
            }
        }
    }
    
    
    bool isPal(string s, int left, int right)
    {
        while (left < right)
        {
            if(s[left++] != s[right--]) return false;
        }
        
        return true;
    }
    
};
// TC: O(n)
// SC: O(1)
