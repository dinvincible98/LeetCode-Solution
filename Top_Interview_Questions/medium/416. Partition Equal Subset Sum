//C++:
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        sum = accumulate(nums.begin(),nums.end(),sum);
        
        // if sum is odd, it can be partition into equal sum subset
        if (sum%2 == 1) return false;
        int sub_sum = sum/2;
        
        int n = nums.size();
        vector<int> dp(sub_sum+1, false);
        dp[0] = true;
        
        for (auto& n:nums)
        {
            for(int j=sub_sum;j>=n;--j)
            {
                dp[j] = dp[j] || dp[j-n];
            }                
        }
        
        return dp[sub_sum];
    }
};

// TC: O(m*n) m is subset sum , n is size of array
// SC: O(m)
