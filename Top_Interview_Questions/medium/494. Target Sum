//C++:
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum = 0;
        sum = accumulate(nums.begin(),nums.end(),sum);
        
        if((sum+target)%2==1 || target>sum || target<-sum)  return 0;
        
        int n = (sum+target)/2;
        
        vector<int> dp(n+1,0);
        dp[0] = 1;
        
        for (int i=0;i<nums.size();++i)
        {
            for (int j=n;j>=nums[i];--j)
            {
                dp[j] += dp[j-nums[i]];
            }
        }
        
        return dp[n];
        
        
    }
};

// TC: O(t*n)
// SC: O(t)		2*t+1 is used
