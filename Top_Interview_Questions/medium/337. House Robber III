//C++:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rob(TreeNode* root) {
        pair<int,int> res = helper(root);
        
        return max(res.first,res.second);
    }
private:
    
    pair<int,int> helper(TreeNode* root)
    {
        if(!root)   return {0,0};
        
        pair<int,int> left = helper(root->left);
        pair<int,int> right = helper(root->right);
        
        // rob current node, need to skip next node
        int rob = root->val + left.second + right.second;
        
        // not rob current node
        int not_rob = max(left.first,left.second) + max(right.first,right.second);
        
        return {rob, not_rob};
    
    }
};
// TC: O(n)
// SC: O(n)
