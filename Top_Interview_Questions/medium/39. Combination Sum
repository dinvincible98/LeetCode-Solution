//C++:
class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& nums, int target) {
        vector<vector<int>> res;
        vector<int> path;
        
        backtrack(res,path,nums,target,0);
        
        return res;
    }
private:
    void backtrack(vector<vector<int>> &res, vector<int> &path, vector<int> &nums, int target, int idx)
    {
        if(target<0)    return; 
        if(target == 0) res.push_back(path);

        for (int i=idx;i<nums.size();++i)
        {
            path.push_back(nums[i]);
            backtrack(res,path,nums,target-nums[i],i);
            path.pop_back();

        } 
          
    }
    

};

// TC: O(N^(T/M+1))
// SC: O(T/M)			T/M is the number of recursive call
