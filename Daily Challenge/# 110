110. Balanced Binary Tree

C++:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        return !root || isBalanced(root->left) && isBalanced(root->right) && abs(depth(root->left)-depth(root->right))<=1; 
    }
private:
    int depth(TreeNode* root){
        return root ? max(depth(root->left),depth(root->right))+1:0;
    }
};

Python:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        self.balance= True
        def dfs(root):
            if not root:    return False
            left = dfs(root.left)
            right = dfs(root.right)
            if abs(left-right)>1:   self.balance=False
            return max(left,right)+1
        dfs(root)
        return self.balance



