//C++:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        ListNode* dummy = new ListNode(0);
        ListNode* prev = dummy;
        ListNode* cur;
        
        dummy->next = head;
        
        for (int i=0;i<left-1;++i)  prev = prev->next;
        
        cur = prev->next;
        
        for (int i=0;i<right-left;++i)
        {
            ListNode* temp = prev->next;
            prev->next = cur->next;
            cur->next = cur->next->next;
            prev->next->next = temp;
        }
        return dummy->next;
        
    }
};

//Python:
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def reverseBetween(self, head, left, right):
        """
        :type head: ListNode
        :type left: int
        :type right: int
        :rtype: ListNode
        """
        
        dummy = ListNode(0)
        prev = dummy
        cur = ListNode()
        
        dummy.next = head
        
        for i in range(0,left-1):   prev = prev.next
        
        cur = prev.next
        
        for i in range(0,right-left):
            temp = ListNode()
            temp = prev.next
            prev.next = cur.next
            cur.next = cur.next.next
            prev.next.next = temp
        
        
        return dummy.next



