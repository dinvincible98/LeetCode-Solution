//C++:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<int> path;
        vector<vector<int>> res;
        dfs(res,path,root,targetSum);
        
        return res;
        

    }
private:
    void dfs(vector<vector<int>> &res, vector<int> &path,TreeNode *root,int targetSum)
    {
        if (!root)  return;
        path.push_back(root->val);
        targetSum -= root->val;
        
        if (root->left==NULL && root->right==NULL)
        {
            if (targetSum==0)   res.push_back(path);
        }
        else
        {
            dfs(res,path,root->left,targetSum);
            dfs(res,path,root->right,targetSum);
        }
        path.pop_back(); //backtrack
        
    }
    
};

//Python:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def pathSum(self, root, targetSum):
        """
        :type root: TreeNode
        :type targetSum: int
        :rtype: List[List[int]]
        """
        
        res = []
        path = []
        self.dfs(res,path,root,targetSum)
        
        return res
    
    
    
    def dfs(self,res,path,root,targetSum):
        if not root:    return
        path.append(root.val)
        targetSum -= root.val
        if not root.left and not root.right:
            if targetSum == 0:
                res.append(path[:])  #append all path to the res  
        
        else:
            self.dfs(res,path,root.left,targetSum)
            self.dfs(res,path,root.right,targetSum)
        path.pop()     # backtrack
        
            


