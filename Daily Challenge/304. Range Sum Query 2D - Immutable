C++:

class NumMatrix {
public:
    NumMatrix(vector<vector<int>>& matrix) {
        accu = matrix;
        for (int i=0;i<accu.size();++i)
        {
            for (int j=0;j<accu[0].size();++j)
            {
                accu[i][j] += helper(i-1,j) + helper(i,j-1) - helper(i-1,j-1);
            }
        }
        
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        return helper(row2,col2) - helper(row1-1,col2) - helper(row2,col1-1) + helper(row1-1,col1-1);

    
    }
    
    
private:
    vector<vector<int>> accu;
    
    int helper(int i,int j)
    {
        return i>=0&&j>=0?  accu[i][j]:0;
    }
};



Python:
class NumMatrix(object):

    def __init__(self, matrix):
        """
        :type matrix: List[List[int]]
        """
    
        self.accu = matrix

        n = len(matrix)
        m = len(matrix[0])
        
        for i in range(n):
            for j in range(m):
                self.accu[i][j] += self.helper(i-1,j) + self.helper(i,j-1) - self.helper(i-1,j-1)
        
    def sumRegion(self, row1, col1, row2, col2):
        """
        :type row1: int
        :type col1: int
        :type row2: int
        :type col2: int
        :rtype: int
        """
        return self.helper(row2,col2) - self.helper(row1-1,col2) -self.helper(row2,col1-1) + self.helper(row1-1,col1-1)
    
    
    
    def helper(self,i,j):
        return self.accu[i][j] if i>=0 and j>=0 else 0

