C++:

class Solution {
public:
    int scheduleCourse(vector<vector<int>>& courses) {
        priority_queue<int> pq;
        sort(courses.begin(),courses.end(),[](auto& a,auto& b){ return a[1]<b[1];});
        
        int sum = 0;
        for (auto& c:courses)
        {
            int dur = c[0], end = c[1];
            
            if(sum+dur <= end)
            {
                sum += dur;
                pq.push(dur);
            }
            else if(pq.size() && pq.top()>dur)
            {
                sum += dur-pq.top();
                pq.pop();
                pq.push(dur);
            }
        }
        return pq.size();
            
        
    }
};
Python:

class Solution(object):
    def scheduleCourse(self, courses):
        """
        :type courses: List[List[int]]
        :rtype: int
        """
        
        heap = []
        tot = 0
        
        for dur,end in sorted(courses,key=lambda x: x[1]):
            if tot+dur <= end:
                tot += dur
                heappush(heap,-dur)
            elif heap and -heap[0]>dur:
                tot += dur+heappop(heap)
                heappush(heap,-dur)
        return len(heap)
                



