C++:

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        vector<int> list;
        while(head!=NULL)
        {
            list.push_back(head->val);
            head = head->next;
        }
        return buildBST(list,0,list.size()-1);
        
    }
    
private:
    TreeNode* buildBST(vector<int> list,int left, int right)
    {
        if (left>right) return NULL;
        int mid = left + (right-left)/2;
        TreeNode* root = new TreeNode(list[mid]);
        root->left = buildBST(list,left,mid-1);
        root->right = buildBST(list,mid+1,right);
        return root;
        
    }
};
        

Python:

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
        l = []
        while head:
            l.append(head.val)
            head = head.next
        
        return self.buildBST(l,0,len(l)-1)
    
    def buildBST(self,nums,left,right):
        if left>right:  return None
        mid = left+ (right-left)//2
        root = TreeNode(nums[mid])
        root.left = self.buildBST(nums,left,mid-1)
        root.right = self.buildBST(nums,mid+1,right)
        return root



