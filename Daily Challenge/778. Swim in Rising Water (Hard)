//C++:
class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        int n = grid.size();
        int res = max(grid[0][0],grid[n-1][n-1]);
        
        priority_queue<vector<int>,vector<vector<int>>,greater<vector<int>>> pq;
        vector<vector<int>> visited(n,vector<int> (n,0));
        vector<int> dir {-1,0,1,0,-1};
        
        pq.push({res,0,0});
        while (!pq.empty())
        {
            auto cur = pq.top();
            pq.pop();
            res = max(res,cur[0]);
            
            queue<pair<int,int>> q;
            q.push(make_pair(cur[1],cur[2]));
            
            while (!q.empty())
            {
                auto p = q.front();
                q.pop();
                if (p.first==n-1 && p.second==n-1)  return res;
                
                for (int i=0;i<4;++i)
                {
                    int r = p.first + dir[i];
                    int c = p.second + dir[i+1];
                    if (r>=0 && r<n && c>=0 && c<n && visited[r][c]==0)
                    {
                        visited[r][c] = 1;
                        if (grid[r][c] <= res)  q.push(make_pair(r,c));
                        else    pq.push({grid[r][c],r,c});
                    }
                }
            }
        }
        return -1;
    }
};

//Python:




