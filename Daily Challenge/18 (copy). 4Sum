//C++:

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> res;
        vector<int> path;
        dfs(res,nums,0,target,0,0,path);
        return res;
    
    }
    
private:
    void dfs(vector<vector<int>> &res, vector<int> &nums, int pos, int target, int count, int sum, vector<int> &path)
    {
        if (count == 4)
        {
            if (sum == target)  res.push_back(path);
            return;
        }
        
        for (int i=pos;i<nums.size();++i)
        {
            if (i != pos && nums[i] == nums[i-1]) continue;
            if (sum + nums[i] + (3-count) * nums.back() < target)   continue;
            if (sum + (4-count) * nums[i] > target) break;
            path.push_back(nums[i]);
            dfs(res,nums,i+1,target,count+1,sum+nums[i],path);
            path.pop_back();
        }
    }
};

//Python:
class Solution(object):
    def fourSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        nums.sort()
        self.res = []
        self.path = []
        self.dfs(self.res,nums,0,target,0,0,self.path)
        print(self.path)
        
        return self.res
    
        
    
    def dfs(self,res,nums,pos,target,count,Sum,path):
        if count == 4:
            if Sum == target:   res.append(path)
            # print(res)
            return
        
        for i in range(pos,len(nums)):
            if i != pos and nums[i] == nums[i-1]:   continue
            if (Sum + nums[i] + (3-count) * nums[-1]) < target:   continue
            if (Sum + (4-count) * nums[i]) > target:  break
            path.append(nums[i])
            # print(path)
            self.dfs(res,nums,i+1,target,count+1,Sum+nums[i],path)
            path.pop()
#             print(path)
            


