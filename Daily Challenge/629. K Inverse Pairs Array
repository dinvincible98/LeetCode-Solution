//C++:

class Solution {
typedef long long LL;
public:
    int kInversePairs(int n, int k) {
        LL mod = 1e9+7;
        vector<vector<int>> dp(n+1,vector<int> (k+1,0));
        dp[0][0] = 1;
        
        for (int i=1;i<=n;++i)
        {
            dp[i][0] = 1;
            for (int j=1;j<=k;++j)
            {
                dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % mod;
                if (j-i>=0)
                {
                    dp[i][j] = (dp[i][j]-dp[i-1][j-i]+mod) % mod;
                }
            }
        }
        return dp[n][k];
        
    }
};

//Python:
class Solution(object):
    def kInversePairs(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: int
        """
        mod = 1e9+7
        dp = [[0 for i in range(k+1)] for j in range(n+1)]
        dp[0][0] = 1
        
        for i in range(1,n+1):
            dp[i][0] = 1
            for j in range(1,k+1):
                dp[i][j] = int((dp[i-1][j]+dp[i][j-1]) % mod)
                if j-i>=0:
                    dp[i][j] = int((dp[i][j]-dp[i-1][j-i]+mod) % mod)
        return dp[n][k]
                



