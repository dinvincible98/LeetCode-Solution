98. Validate Binary Search Tree

C++:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    bool helper(TreeNode* root, long min, long max){
        if (root==NULL) return true;
        if ((root->val > min) && (root->val < max)){
            bool temp1 = helper(root->left,min,root->val);
            bool temp2 = helper(root->right,root->val,max);
            return temp1&&temp2;
        } 
        return false;
    }
        
        
    bool isValidBST(TreeNode* root) {
        return helper(root, LONG_MIN,LONG_MAX);
    }
};

Python:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        def helper(node,lower,upper):
            if not node:
                return True
            if lower<node.val<upper:
                return helper(node.left,lower,node.val) and helper(node.right,node.val,upper)
            
            else:
                return False
        return helper(node=root,lower=float('-inf'),upper=float('inf'))
