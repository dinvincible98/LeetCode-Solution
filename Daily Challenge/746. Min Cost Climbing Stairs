//C++:

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        vector<int> dp(n,0);
        dp[0] = cost[0];
        dp[1] = cost[1];
        
        for(int i=2;i<n;++i)    dp[i]= cost[i] + min(dp[i-2],dp[i-1]);
        
        return min(dp[n-2],dp[n-1]);
    }
};

//Python:

class Solution(object):
    def minCostClimbingStairs(self, cost):
        """
        :type cost: List[int]
        :rtype: int
        """
        n = len(cost)
        dp = [0]*n
        dp[0] = cost[0]
        dp[1] = cost[1]
        
        for i in range(2,n):    dp[i] = cost[i]+min(dp[i-2],dp[i-1])
        
        return min(dp[n-1],dp[n-2])
