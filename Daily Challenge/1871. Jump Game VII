//C++:
class Solution {
public:
    bool canReach(string s, int minJump, int maxJump) {
        int n = s.size();
        int prev = 0;
        vector<bool> dp(n,false);
        dp[0] = true;
        
        
        for (int i=1;i<n;++i)
        {
            if (i>=minJump)  prev += dp[i-minJump];
            if (i>maxJump)  prev -= dp[i-maxJump-1];
                
            dp[i] = prev>0 && s[i]=='0';
        }
        
        return dp[n-1];
        
    }
};

//Python:
class Solution(object):
    def canReach(self, s, minJump, maxJump):
        """
        :type s: str
        :type minJump: int
        :type maxJump: int
        :rtype: bool
        """
        
        n = len(s)
        prev = 0
        dp = [False]*n
        dp[0] = True
        
        for i in range(1,n):
            if i>=minJump:   prev += dp[i-minJump]
            if i>maxJump:   prev -= dp[i-maxJump-1]
            dp[i] = True if prev>0 and s[i]=='0' else False
        
        
        return dp[n-1]
