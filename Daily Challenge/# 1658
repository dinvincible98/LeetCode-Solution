1658. Minimum Operations to Reduce X to Zero

C++:

class Solution {
public:
    int minOperations(vector<int>& nums, int x) {
        int subSum = accumulate(nums.begin(), nums.end(), 0) - x;
        int n = nums.size(), s = 0, st = 0, maxLen = -1;
        
        for(int i=0; i<n; i++) {
            s += nums[i];
            while(st <= i && s > subSum) {
                s -= nums[st++];
            }
            if(s == subSum) {
                maxLen = max(maxLen, i-st+1);
            } 
        }
        
        return (maxLen == -1)? maxLen: (n-maxLen);
    }
};

Python:

class Solution(object):
    def minOperations(self, nums, x):
        """
        :type nums: List[int]
        :type x: int
        :rtype: int
        """
        
        a = sum(nums) - x
        if a<0: return -1
        if a==0: return len(nums)
        
        count = 0
        total = 0
        i = 0
        for j in range(len(nums)):
            total += nums[j]
            while total>a:
                total-=nums[i]
                i+=1
            if total==a:
                count = max(count,j-i+1)
        if count>0:
            return len(nums)-count
        return -1
                



