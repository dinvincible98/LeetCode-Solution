//C++:

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        if (!root)  return {};
        queue<Node*> q;
        q.push(root);
        
        vector<vector<int>> res;
 
        while (!q.empty())
        {
            res.emplace_back();
            for (int i=q.size();i>=1;--i)
            {
                Node *curr = q.front();
                q.pop();
                res.back().push_back(curr->val);            
                for (auto &child:curr->children)
                {
                    q.push(child);
                }
            }
            
        }
        return res;
        
    }
};
//Python:
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""

class Solution(object):
    def levelOrder(self, root):
        """
        :type root: Node
        :rtype: List[List[int]]
        """
        
        q = []
        res = []
        
        if not root:    return []
        q.append(root)
        
        while q:
            res.append([])
            for i in range(len(q),0,-1):
                curr = q[0];
                q.pop(0)
                res[-1].append(curr.val)
                
                for child in curr.children:
                    q.append(child)
        
        return res
                    

