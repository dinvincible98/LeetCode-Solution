//C++:

class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> res;
        helper(res,"",n,n);
        return res;
    }
    
private:
    void helper(vector<string>& res, string s, int left, int right)
    {
        if (left==0 && right==0)
        {
            res.push_back(s);
            return;
        }
        if (left>0) helper(res,s+'(',left-1,right);
        if (right>left) helper(res,s+')',left,right-1);
    }
    
};

//Python:
class Solution(object):
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        
        self.res = []
        self.helper(self.res,"",n,n)
    
        return self.res
    
    
    def helper(self,res,s,left,right):
        
        if left==0 and right==0:
            res.append(s)
            return
        if left>0:  self.helper(res,s+"(",left-1,right)
        if right>left:  self.helper(res,s+")",left,right-1)
                



