//C++:

class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        vector<int> parent(n+1,0);
        vector<int> res;
        
        for (auto& e:edges)
        {
            int n1 = e[0];
            int n2 = e[1];
            
            while (parent[n1])  n1 = parent[n1];
            while (parent[n2])  n2 = parent[n2];     
            
            if (n1==n2) res = e;
            else    parent[n1] = n2;
        }
        return res;
    }
};

//Python:
class Solution(object):
    def findRedundantConnection(self, edges):
        """
        :type edges: List[List[int]]
        :rtype: List[int]
        """
        
        n = len(edges)
        parent = [0]*(n+1)
        res = None
        
        for edge in edges:
            n1 = edge[0]
            n2 = edge[1]
            
            while parent[n1]:   n1 = parent[n1]
            while parent[n2]:   n2 = parent[n2]
                
            if n1==n2:  res = edge
            else:   parent[n1] = n2
        return res
        



