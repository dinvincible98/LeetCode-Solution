C++:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int cnt = 0;
    
    int minCameraCover(TreeNode* root) {
    
        return (dfs(root)<1? 1:0) + cnt;
    
    }
private:
    int dfs(TreeNode * root)
    {
        if(!root)  return 2;
        int left = dfs(root->left);
        int right = dfs(root->right);
        
        if(left==0 || right==0)
        {
            cnt++;
            return 1;
        }
        
        return left==1 || right==1 ? 2:0;
        
    }
    
};

Python:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):

    def minCameraCover(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.cnt = 0;
        return (1 if self.dfs(root)<1 else 0)+self.cnt
    
    def dfs(self,root):
        if not root:    return 2;
        left = self.dfs(root.left)
        right = self.dfs(root.right)
        
        if left==0 or right==0:
            self.cnt+=1
            return 1
        
        return 2 if left==1 or right==1 else 0
        
        


