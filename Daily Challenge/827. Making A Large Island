//C++:
class Solution {
public:
    int largestIsland(vector<vector<int>>& grid) {
        vector<int> sizes = {0, 0};
        int res = 0;
        
        int n = grid.size();
        int m = grid[0].size();
        
        for (int i=0;i<n;++i)
        {
            for (int j=0;j<m;++j)
            {
                if(grid[i][j] == 1) sizes.push_back(paint(grid,i,j,sizes.size()));
            }
        }
        
        for (int i=0;i<n;++i)
        {
            for(int j=0;j<m;++j)
            {
                if(grid[i][j] == 0) 
                {
                    // get color grid
                    unordered_set<int> s = {get(grid,i+1,j),get(grid,i-1,j),get(grid,i,j+1),get(grid,i,j-1)};
                    // find max area of color grids
                    res = max(res, 1+accumulate(s.begin(),s.end(),0,[&](int a, int b) {return a+sizes[b];}));
                }
            }
        }
        return res == 0? n*m:res;
        
    }
private:
    int get(vector<vector<int>>& grid,int i,int j)
    {
        return (i<0 || j<0 || i>=grid.size() || j>=grid[0].size())? 0:grid[i][j];
    }
    int paint(vector<vector<int>>& grid, int i, int j, int color)
    {
        if (get(grid,i,j) != 1) return 0;
        grid[i][j] = color;
        return 1 + paint(grid,i+1,j,color) + paint(grid,i-1,j,color) + paint(grid,i,j+1,color) + paint(grid,i,j-1,color);
    }
};
//Python:
class Solution(object):
    def largestIsland(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        n = len(grid)
        m = len(grid[0])
        
        sizes = [0,0]
        res = 0
        
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 1:
                    sizes.append(self.paint(grid,i,j,len(sizes)))
        
        for i in range(n):
            for j in range(m):
                if grid[i][j] == 0:
                    res = max(res, 1+sum(sizes[c] for c in {self.get(grid,i+1,j), \
                                                             self.get(grid,i-1,j), \
                                                             self.get(grid,i,j+1), \
                                                             self.get(grid,i,j-1)}))
        
        return n*m if res is 0 else res
    
    
    
    
    def get(self,grid,i,j):
        return 0 if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) else grid[i][j] 
    
    def paint(self,grid,i,j,color):
        if self.get(grid,i,j) != 1: return 0
        grid[i][j] = color
        return 1 + self.paint(grid,i+1,j,color) \
                 + self.paint(grid,i-1,j,color) \
                 + self.paint(grid,i,j-1,color) \
                 + self.paint(grid,i,j+1,color)
    
