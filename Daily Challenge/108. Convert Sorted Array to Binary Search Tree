C++:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return buildBST(nums,0,nums.size()-1);
    }
    
private:
    TreeNode* buildBST(vector<int>& nums,int left,int right)
    {
        if(left>right)  return NULL;
        int mid = left+(right-left)/2;
        TreeNode* root = new TreeNode(nums[mid]);
        root->left = buildBST(nums,left,mid-1);
        root->right = buildBST(nums,mid+1,right);
        return root;
    }
};

Python:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def sortedArrayToBST(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        return self.buildBST(nums,0,len(nums)-1)
    
    
    def buildBST(self,nums,left,right):
        if left>right:  return None
        mid = left+ (right-left)//2
        root = TreeNode(nums[mid])
        root.left = self.buildBST(nums,left,mid-1)
        root.right = self.buildBST(nums,mid+1,right)
        return root




