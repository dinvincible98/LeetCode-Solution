C++:
class Solution {
public:
    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        
        for (int i=1;i<n+1;++i)
        {
            for (int j=1;j<m+1;++j)
            {
                dp[i][j] = max(max(dp[i-1][j],dp[i][j-1]),dp[i-1][j-1]+(word1[i-1]==word2[j-1]));
            }
        }
        
        return n+m-2*dp[n][m];
            
        
    }
};

Python:
class Solution(object):
    def minDistance(self, word1, word2):
        """
        :type word1: str
        :type word2: str
        :rtype: int
        """
        n = len(word1)
        m = len(word2)
        
        dp = [[0 for i in range(m+1)] for j in range(n+1)]
        
        for i in range(1,n+1):
            for j in range(1,m+1):
                dp[i][j] = max(max(dp[i-1][j],dp[i][j-1]),dp[i-1][j-1]+(1 if word1[i-1]==word2[j-1] else 0))
        return n+m-2*dp[n][m]

