594. Longest Harmonious Subsequence
C++:
class Solution {
public:
    int findLHS(vector<int>& nums) {
        int max_len = 0;
        unordered_map<int,int> mp;
        for (auto num : nums)
        {
            mp[num]++;
        }
        
        for (auto i : mp)
        {
            if(mp.count(i.first+1))
            {
                max_len = max(max_len,i.second+mp[i.first+1]); 
            }
        }
        return max_len;
        
    }
};

Python:
class Solution(object):
    def findLHS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        map = {}
        for num in nums:
            map[num] = map.get(num,0)+1
        max_len = 0
        for i in map:
            if i+1 in map:
                max_len = max(max_len,map[i]+map[i+1])
        return max_len
            
