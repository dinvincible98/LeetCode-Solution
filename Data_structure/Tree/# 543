543. Diameter of Binary Tree

C++:

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        int res = depth(root);
        return max_path;
        
    }

private:
    int depth(TreeNode* root)
    {
        if(!root)   return 0;
        int left = depth(root->left);
        int right = depth(root->right);
        max_path = max(max_path,left+right);
        return max(left,right)+1;
    }
    
    int max_path = 0;
};

Python:

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def diameterOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.max_path = 0
        res = self.depth(root)
        return self.max_path
        
    def depth(self,root):
        if root==None:
            return 0
        left = self.depth(root.left)
        right = self.depth(root.right)
        self.max_path = max(self.max_path, left+right)
        return max(left,right)+1
        
        
