//C++:
class Solution {
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        int n = board.size();
        
        queue<int> q;
        q.push(1);
        
        int res = INT_MAX;
        vector<int> dist(n*n+1,INT_MAX);
        dist[1] = 0;
        
        while (!q.empty())
        {
            int sz = q.size();
            for (int i=0;i<sz;++i)
            {
                int x = q.front();
                q.pop();
                
                for (int j=1;j<=6;++j)
                {
                    // pos after throwing dice
                    int pos = x + j;
                    
                    // out of game
                    if(pos > n*n)   break;
                    
                    
                    // assume from top down
                    int row = (pos%n)==0? pos/n-1:pos/n;
                    int col;
                    
                    if(row%2 == 0)  col = (pos%n)==0? n-1:pos%n-1;
                    else    col = (pos%n)==0? 0:n-pos%n;
                    
                    row = n-1-row;
                    
                    // snake or ladder
                    if(board[row][col] != -1)   pos = board[row][col];
                    if(pos == n*n)  res = min(res,dist[x]+1);
                    
                    // every node is visited once
                    if(dist[pos] == INT_MAX)
                    {
                        q.push(pos);
                        dist[pos] = dist[x]+1;
                    }
                }
            }
        }
        
        return res==INT_MAX? -1:res;
        
    }
};
// TC: O(2^n)
// SC: O(n)
