// C++
class Solution {
public:
    vector<string> mostVisitedPattern(vector<string>& username, vector<int>& timestamp, vector<string>& website) {
        unordered_map<string,vector<pair<int,string>>> mp;
        set<vector<string>> seqs;
        map<vector<string>,int> seq_cnt;
        
        for (int i=0;i<username.size();++i)
        {
            mp[username[i]].push_back({timestamp[i],website[i]});
        }
        
        for (auto& it:mp)
        {
            auto visit = it.second;
            // sort based on timestamp increasing order
            sort(visit.begin(),visit.end(),
                [](const auto& a, const auto& b)
                {
                    return a.first < b.first;  
                });
            
            // generate all possible 3-seqs of website for each user
            seqs.clear();
            for (int i=0;i<visit.size();++i)
            {
                for (int j=0;j<i;++j)
                {
                    for (int k=0;k<j;++k)
                    {
                        seqs.insert({visit[k].second,visit[j].second,visit[i].second});
                    }
                }
            }
            
            // cnt the 3-seqs website
            for (auto& s:seqs)
            {
                seq_cnt[s]++;
            }
        }
        
        return max_element(seq_cnt.begin(),seq_cnt.end(),
                          [](const auto& p1, const auto& p2)
                          {
                          	// if cnt not same, sort by greater value. Otherwise, sort by alphabetically order
                            return p1.second==p2.second? p1.first>p2.first:p1.second<p2.second;    
                          })->first;
           
    }
};
// TC: O(n)
// SC: O(1)
